{
  "info": {
    "_postman_id": "57e11b1c-5511-4a08-be30-756f942a0e60",
    "name": "Space Backend API",
    "description": "API documentation for the Space Backend application.\n\n## Authentication\n\nThe API uses cookie-based authentication. When you log in, the server will return tokens as HTTP-only cookies instead of in the JSON response. Make sure your client is configured to send cookies with requests by setting `withCredentials: true`.\n\n## Multi-language Support\n\nAll API endpoints support language localization. You can set the language in two ways:\n\n1. Via query parameter: Add `?lang=en` or `?lang=vi` to your requests\n2. Via Accept-Language header: Set the `Accept-Language` header to `en` or `vi`\n\nSupported languages: Vietnamese (vi) and English (en).",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "description": "Authentication related endpoints",
      "item": [
        {
          "name": "Register",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Accept-Language",
                "value": "{{language}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"test@example.com\",\n    \"password\": \"Password123!\",\n    \"password_confirmation\": \"Password123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new user account"
          },
          "response": []
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Note: With cookie authentication, tokens might not be in the JSON response",
                  "// This script is kept for backwards compatibility or if tokens are included in response",
                  "",
                  "const response = pm.response.json();",
                  "",
                  "if (response.access_token) {",
                  "    pm.collectionVariables.set('access_token', response.access_token);",
                  "    console.log('Access token saved to collection variables');",
                  "}",
                  "",
                  "if (response.refresh_token) {",
                  "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                  "    console.log('Refresh token saved to collection variables');",
                  "}",
                  "",
                  "if (response.expires_in) {",
                  "    const expiryTime = new Date();",
                  "    expiryTime.setSeconds(expiryTime.getSeconds() + response.expires_in);",
                  "    pm.collectionVariables.set('token_expiry', expiryTime.getTime().toString());",
                  "    console.log('Token expiry time saved: ' + expiryTime);",
                  "}",
                  "",
                  "// Always check if login was successful",
                  "pm.test(\"Login successful\", function() {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Accept-Language",
                "value": "{{language}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"tuanldas@gmail.com\",\n    \"password\": \"123123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with admin credentials (tuanldas@gmail.com/123123). Authentication tokens will be set as HTTP-only cookies. Make sure to enable 'Send cookies' in Postman settings for this request."
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Note: With cookie authentication, tokens might not be in the JSON response",
                  "// This script is kept for backwards compatibility or if tokens are included in response",
                  "",
                  "const response = pm.response.json();",
                  "",
                  "if (response.access_token) {",
                  "    pm.collectionVariables.set('access_token', response.access_token);",
                  "    console.log('Access token refreshed and saved to collection variables');",
                  "}",
                  "",
                  "if (response.refresh_token) {",
                  "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                  "    console.log('New refresh token saved to collection variables');",
                  "}",
                  "",
                  "if (response.expires_in) {",
                  "    const expiryTime = new Date();",
                  "    expiryTime.setSeconds(expiryTime.getSeconds() + response.expires_in);",
                  "    pm.collectionVariables.set('token_expiry', expiryTime.getTime().toString());",
                  "    console.log('Token expiry time updated: ' + expiryTime);",
                  "}",
                  "",
                  "// Always check if refresh was successful",
                  "pm.test(\"Token refresh successful\", function() {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const refreshToken = pm.collectionVariables.get('refresh_token');",
                  "if (refreshToken) {",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    requestBody.refresh_token = refreshToken;",
                  "    pm.request.body.raw = JSON.stringify(requestBody);",
                  "    console.log('Using refresh token from collection variables');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Accept-Language",
                "value": "{{language}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/refresh-token",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "refresh-token"]
            },
            "description": "Refresh access token using refresh token. The refresh token will be automatically read from cookie if not provided in the request body. New tokens will be set as HTTP-only cookies."
          },
          "response": []
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "logout"]
            },
            "description": "Logout current user. This will revoke the current token and clear authentication cookies."
          },
          "response": []
        },
        {
          "name": "Get Current User Profile",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This script will run before the request is sent",
                  "// It ensures the Authorization header is set with the current access token",
                  "const accessToken = pm.collectionVariables.get('access_token');",
                  "if (accessToken) {",
                  "    pm.request.headers.upsert({",
                  "        key: 'Authorization',",
                  "        value: 'Bearer ' + accessToken",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/me",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "me"]
            },
            "description": "Get current authenticated user's profile with roles and permissions"
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Check if token is expired and needs refresh",
              "const tokenExpiry = pm.collectionVariables.get('token_expiry');",
              "const refreshToken = pm.collectionVariables.get('refresh_token');",
              "",
              "if (tokenExpiry && refreshToken) {",
              "    const currentTime = new Date().getTime();",
              "    const expiryTime = parseInt(tokenExpiry);",
              "    ",
              "    // If token expires in less than 30 seconds, refresh it",
              "    if (currentTime + 30000 > expiryTime) {",
              "        console.log('Token is about to expire, refreshing...');",
              "        ",
              "        pm.sendRequest({",
              "            url: pm.collectionVariables.get('base_url') + '/api/auth/refresh-token',",
              "            method: 'POST',",
              "            header: {",
              "                'Content-Type': 'application/json',",
              "                'Accept': 'application/json'",
              "            },",
              "            body: {",
              "                mode: 'raw',",
              "                raw: JSON.stringify({ refresh_token: refreshToken })",
              "            }",
              "        }, function (err, res) {",
              "            if (!err && res.code === 200) {",
              "                const response = res.json();",
              "                if (response.access_token) {",
              "                    pm.collectionVariables.set('access_token', response.access_token);",
              "                    console.log('Token refreshed automatically');",
              "                    ",
              "                    if (response.refresh_token) {",
              "                        pm.collectionVariables.set('refresh_token', response.refresh_token);",
              "                    }",
              "                    ",
              "                    if (response.expires_in) {",
              "                        const newExpiryTime = new Date();",
              "                        newExpiryTime.setSeconds(newExpiryTime.getSeconds() + response.expires_in);",
              "                        pm.collectionVariables.set('token_expiry', newExpiryTime.getTime().toString());",
              "                    }",
              "                }",
              "            } else {",
              "                console.error('Failed to refresh token automatically');",
              "            }",
              "        });",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "User",
      "description": "User related endpoints",
      "item": [
        {
          "name": "List Users",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This script will run before the request is sent",
                  "// It ensures the Authorization header is set with the current access token",
                  "const accessToken = pm.collectionVariables.get('access_token');",
                  "if (accessToken) {",
                  "    pm.request.headers.upsert({",
                  "        key: 'Authorization',",
                  "        value: 'Bearer ' + accessToken",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users?per_page=10&search=",
              "host": ["{{base_url}}"],
              "path": ["api", "users"],
              "query": [
                {
                  "key": "per_page",
                  "value": "10",
                  "description": "Number of items per page"
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search term to filter users"
                }
              ]
            },
            "description": "Get paginated list of users with optional search filter"
          },
          "response": []
        },
        {
          "name": "Get User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This script will run before the request is sent",
                  "// It ensures the Authorization header is set with the current access token",
                  "const accessToken = pm.collectionVariables.get('access_token');",
                  "if (accessToken) {",
                  "    pm.request.headers.upsert({",
                  "        key: 'Authorization',",
                  "        value: 'Bearer ' + accessToken",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/1",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "1"]
            },
            "description": "Get a specific user by ID"
          },
          "response": []
        },
                {
          "name": "Create User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This script will run before the request is sent",
                  "// It ensures the Authorization header is set with the current access token",
                  "const accessToken = pm.collectionVariables.get('access_token');",
                  "if (accessToken) {",
                  "    pm.request.headers.upsert({",
                  "        key: 'Authorization',",
                  "        value: 'Bearer ' + accessToken",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"New User\",\n    \"email\": \"newuser@example.com\",\n    \"password\": \"Password123!\",\n    \"password_confirmation\": \"Password123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": ["{{base_url}}"],
              "path": ["api", "users"]
            },
            "description": "Create a new user"
          },
          "response": []
        },
        {
          "name": "Update User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This script will run before the request is sent",
                  "// It ensures the Authorization header is set with the current access token",
                  "const accessToken = pm.collectionVariables.get('access_token');",
                  "if (accessToken) {",
                  "    pm.request.headers.upsert({",
                  "        key: 'Authorization',",
                  "        value: 'Bearer ' + accessToken",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Updated User Name\",\n    \"email\": \"updated@example.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/2",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "2"]
            },
            "description": "Update an existing user"
          },
          "response": []
        },
        {
          "name": "Delete User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This script will run before the request is sent",
                  "// It ensures the Authorization header is set with the current access token",
                  "const accessToken = pm.collectionVariables.get('access_token');",
                  "if (accessToken) {",
                  "    pm.request.headers.upsert({",
                  "        key: 'Authorization',",
                  "        value: 'Bearer ' + accessToken",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
                }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/2",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "2"]
            },
            "description": "Delete a user"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Role & Permission Management",
      "description": "Endpoints for managing roles and permissions",
      "item": [
        {
          "name": "List All Roles",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This script will run before the request is sent",
                  "// It ensures the Authorization header is set with the current access token",
                  "const accessToken = pm.collectionVariables.get('access_token');",
                  "if (accessToken) {",
                  "    pm.request.headers.upsert({",
                  "        key: 'Authorization',",
                  "        value: 'Bearer ' + accessToken",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/roles",
              "host": ["{{base_url}}"],
              "path": ["api", "roles"]
            },
            "description": "Get list of all roles with their abilities"
          },
          "response": []
        },
        {
          "name": "Get Role Details",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This script will run before the request is sent",
                  "// It ensures the Authorization header is set with the current access token",
                  "const accessToken = pm.collectionVariables.get('access_token');",
                  "if (accessToken) {",
                  "    pm.request.headers.upsert({",
                  "        key: 'Authorization',",
                  "        value: 'Bearer ' + accessToken",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/roles/1",
              "host": ["{{base_url}}"],
              "path": ["api", "roles", "1"]
            },
            "description": "Get details of a specific role by ID"
          },
          "response": []
        },
        {
          "name": "Create New Role",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This script will run before the request is sent",
                  "// It ensures the Authorization header is set with the current access token",
                  "const accessToken = pm.collectionVariables.get('access_token');",
                  "if (accessToken) {",
                  "    pm.request.headers.upsert({",
                  "        key: 'Authorization',",
                  "        value: 'Bearer ' + accessToken",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"manager\",\n    \"title\": \"Quản lý\",\n    \"abilities\": [\"view-users\", \"create-users\", \"update-users\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/roles",
              "host": ["{{base_url}}"],
              "path": ["api", "roles"]
            },
            "description": "Create a new role with specified permissions"
          },
          "response": []
        },
        {
          "name": "Update Role",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This script will run before the request is sent",
                  "// It ensures the Authorization header is set with the current access token",
                  "const accessToken = pm.collectionVariables.get('access_token');",
                  "if (accessToken) {",
                  "    pm.request.headers.upsert({",
                  "        key: 'Authorization',",
                  "        value: 'Bearer ' + accessToken",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"manager-updated\",\n    \"title\": \"Quản lý Cấp cao\",\n    \"abilities\": [\"view-users\", \"create-users\", \"update-users\", \"delete-users\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/roles/3",
              "host": ["{{base_url}}"],
              "path": ["api", "roles", "3"]
            },
            "description": "Update an existing role (change name, title or permissions)"
          },
          "response": []
        },
        {
          "name": "Delete Role",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This script will run before the request is sent",
                  "// It ensures the Authorization header is set with the current access token",
                  "const accessToken = pm.collectionVariables.get('access_token');",
                  "if (accessToken) {",
                  "    pm.request.headers.upsert({",
                  "        key: 'Authorization',",
                  "        value: 'Bearer ' + accessToken",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/roles/3",
              "host": ["{{base_url}}"],
              "path": ["api", "roles", "3"]
            },
            "description": "Delete a role (not possible if it's the only role for any user)"
          },
          "response": []
        },
        {
          "name": "List All Abilities",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This script will run before the request is sent",
                  "// It ensures the Authorization header is set with the current access token",
                  "const accessToken = pm.collectionVariables.get('access_token');",
                  "if (accessToken) {",
                  "    pm.request.headers.upsert({",
                  "        key: 'Authorization',",
                  "        value: 'Bearer ' + accessToken",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/abilities",
              "host": ["{{base_url}}"],
              "path": ["api", "abilities"]
            },
            "description": "Get list of all available abilities (permissions) in the system"
          },
          "response": []
        },
        {
          "name": "Assign Role to User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This script will run before the request is sent",
                  "// It ensures the Authorization header is set with the current access token",
                  "const accessToken = pm.collectionVariables.get('access_token');",
                  "if (accessToken) {",
                  "    pm.request.headers.upsert({",
                  "        key: 'Authorization',",
                  "        value: 'Bearer ' + accessToken",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"user_id\": 2,\n    \"role\": \"editor\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/assign-role",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "assign-role"]
            },
            "description": "Assign a role to a user"
          },
          "response": []
        },
        {
          "name": "Remove Role from User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This script will run before the request is sent",
                  "// It ensures the Authorization header is set with the current access token",
                  "const accessToken = pm.collectionVariables.get('access_token');",
                  "if (accessToken) {",
                  "    pm.request.headers.upsert({",
                  "        key: 'Authorization',",
                  "        value: 'Bearer ' + accessToken",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"user_id\": 2,\n    \"role\": \"editor\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/remove-role",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "remove-role"]
            },
            "description": "Remove a role from a user"
          },
          "response": []
        },
        {
          "name": "Get Users by Role",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This script will run before the request is sent",
                  "// It ensures the Authorization header is set with the current access token",
                  "const accessToken = pm.collectionVariables.get('access_token');",
                  "if (accessToken) {",
                  "    pm.request.headers.upsert({",
                  "        key: 'Authorization',",
                  "        value: 'Bearer ' + accessToken",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/roles/admin/users?per_page=10",
              "host": ["{{base_url}}"],
              "path": ["api", "roles", "admin", "users"],
              "query": [
                {
                  "key": "per_page",
                  "value": "10",
                  "description": "Number of items per page"
                }
              ]
            },
            "description": "Get list of users with a specific role"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Transaction Categories",
      "description": "Transaction Categories management endpoints",
      "item": [
        {
          "name": "Get All Categories",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/transaction-categories",
              "host": ["{{base_url}}"],
              "path": ["api", "transaction-categories"],
              "query": [
                {
                  "key": "per_page",
                  "value": "15",
                  "description": "Number of items per page",
                  "disabled": true
                },
                {
                  "key": "type",
                  "value": "expense",
                  "description": "Filter by type (expense, income)",
                  "disabled": true
                }
              ]
            },
            "description": "Get all transaction categories for the current user"
          },
          "response": []
        },
        {
          "name": "Get Category By ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/transaction-categories/:id",
              "host": ["{{base_url}}"],
              "path": ["api", "transaction-categories", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "category_id_here",
                  "description": "UUID of the transaction category"
                }
              ]
            },
            "description": "Get a specific transaction category by its UUID"
          },
          "response": []
        },
        {
          "name": "Create Category",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "name",
                  "value": "Groceries",
                  "type": "text",
                  "description": "Category name"
                },
                {
                  "key": "description",
                  "value": "Daily groceries and supermarket shopping",
                  "type": "text",
                  "description": "Optional description"
                },
                {
                  "key": "type",
                  "value": "expense",
                  "type": "text",
                  "description": "Category type (income, expense, transfer)"
                },
                {
                  "key": "image",
                  "type": "file",
                  "description": "Category image (required)"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/transaction-categories",
              "host": ["{{base_url}}"],
              "path": ["api", "transaction-categories"]
            },
            "description": "Create a new transaction category with image (image field is required)"
          },
          "response": []
        },
        {
          "name": "Update Category",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "name",
                  "value": "Updated Category Name",
                  "type": "text",
                  "description": "Category name"
                },
                {
                  "key": "description",
                  "value": "Updated description",
                  "type": "text",
                  "description": "Optional description"
                },
                {
                  "key": "image",
                  "type": "file",
                  "description": "Category image (optional for updates)"
                },
                {
                  "key": "_method",
                  "value": "PUT",
                  "type": "text",
                  "description": "HTTP method override"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/transaction-categories/:id",
              "host": ["{{base_url}}"],
              "path": ["api", "transaction-categories", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "category_id_here",
                  "description": "UUID of the transaction category"
                }
              ]
            },
            "description": "Update an existing transaction category (image field is optional)"
          },
          "response": []
        },
        {
          "name": "Delete Category",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/transaction-categories/:id",
              "host": ["{{base_url}}"],
              "path": ["api", "transaction-categories", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "category_id_here",
                  "description": "UUID of the transaction category"
                }
              ]
            },
            "description": "Soft delete a transaction category (move to trash)"
          },
          "response": []
        },
        {
          "name": "Get Trashed Categories",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/transaction-categories/trashed",
              "host": ["{{base_url}}"],
              "path": ["api", "transaction-categories", "trashed"],
              "query": [
                {
                  "key": "per_page",
                  "value": "15",
                  "disabled": true
                }
              ]
            },
            "description": "Get all soft-deleted transaction categories for the current user"
          },
          "response": []
        },
        {
          "name": "Restore Category",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/transaction-categories/:id/restore",
              "host": ["{{base_url}}"],
              "path": ["api", "transaction-categories", ":id", "restore"],
              "variable": [
                {
                  "key": "id",
                  "value": "category_id_here",
                  "description": "UUID of the transaction category"
                }
              ]
            },
            "description": "Restore a soft-deleted transaction category"
          },
          "response": []
        },
        {
          "name": "Force Delete Category",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/transaction-categories/:id/force",
              "host": ["{{base_url}}"],
              "path": ["api", "transaction-categories", ":id", "force"],
              "variable": [
                {
                  "key": "id",
                  "value": "category_id_here",
                  "description": "UUID of the transaction category"
                }
              ]
            },
            "description": "Permanently delete a transaction category"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Utilities",
      "description": "Utility endpoints",
      "item": [
        {
          "name": "API Test",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/test",
              "host": ["{{base_url}}"],
              "path": ["api", "test"]
            },
            "description": "Test if API is working properly"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Global pre-request script to check token expiry",
          "const tokenExpiry = pm.collectionVariables.get('token_expiry');",
          "const refreshToken = pm.collectionVariables.get('refresh_token');",
          "",
          "if (tokenExpiry && refreshToken) {",
          "    const currentTime = new Date().getTime();",
          "    const expiryTime = parseInt(tokenExpiry);",
          "    ",
          "    // If token expires in less than 30 seconds, refresh it",
          "    if (currentTime + 30000 > expiryTime) {",
          "        console.log('Token is about to expire, refreshing...');",
          "        ",
          "        pm.sendRequest({",
          "            url: pm.collectionVariables.get('base_url') + '/api/auth/refresh-token',",
          "            method: 'POST',",
          "            header: {",
          "                'Content-Type': 'application/json',",
          "                'Accept': 'application/json'",
          "            },",
          "            body: {",
          "                mode: 'raw',",
          "                raw: JSON.stringify({ refresh_token: refreshToken })",
          "            }",
          "        }, function (err, res) {",
          "            if (!err && res.code === 200) {",
          "                const response = res.json();",
          "                if (response.access_token) {",
          "                    pm.collectionVariables.set('access_token', response.access_token);",
          "                    console.log('Token refreshed automatically');",
          "                    ",
          "                    if (response.refresh_token) {",
          "                        pm.collectionVariables.set('refresh_token', response.refresh_token);",
          "                    }",
          "                    ",
          "                    if (response.expires_in) {",
          "                        const newExpiryTime = new Date();",
          "                        newExpiryTime.setSeconds(newExpiryTime.getSeconds() + response.expires_in);",
          "                        pm.collectionVariables.set('token_expiry', newExpiryTime.getTime().toString());",
          "                    }",
          "                }",
          "            } else {",
          "                console.error('Failed to refresh token automatically');",
          "            }",
          "        });",
          "    }",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://127.0.0.1:8000",
      "type": "string"
    },
    {
      "key": "language",
      "value": "vi",
      "type": "string",
      "description": "API language (vi/en). Used for Accept-Language header and query parameter."
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "token_expiry",
      "value": "",
      "type": "string"
    }
  ]
} 